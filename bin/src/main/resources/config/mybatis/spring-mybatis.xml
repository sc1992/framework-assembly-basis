<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- 数据源配置. -->	
	<import resource="classpath:config/db/db.xml" />
	
	<import resource="classpath:config/mybatis/mapper.xml" />
	
	<!-- 注解Mybatis配置start.
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml" />
		</bean>
		 -->
	 
	<!-- 配置事务.
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource" />
		</bean>
		 -->
	 
	<!-- 启动事务.
		<tx:annotation-driven transaction-manager="transactionManager"/>
		 -->
	 
	<!-- 注解Mybatis配置end -->
	
	
	<!-- XML Mybatis配置start -->
	<!-- **************************************************持久层Bean生命周期的配置与管理begin************************************************** -->		
	<!-- 通过Spring的SqlSessionFactoryBean（工厂Bean）管理持久层Bean的生命周期 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceForMyBatis" />
		<!-- 把*mapper.xml生成代理注入到Spring -->
		<property name="mapperLocations">
			<array>
				<value>classpath:config/mybatis/mapper/*.xml</value>
			</array>
		</property>
		<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml" />
		<property name="typeAliasesPackage" value="com.cmc.*.facade.entity" />
	</bean>
	<!-- **************************************************持久层Bean生命周期的配置与管理end************************************************** -->		
	
	<!-- SqlSession模板类实例 -->
	<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- **************************************************持久层Bean事务的配置begin************************************************** -->		
	<!-- 映射事务管理的数据源 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceForMyBatis" />
	</bean>
	
	<!-- 启用@Transactional，和ActiveMQ有冲突，原因暂未找到. -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- **************************************************持久层Bean事务的配置end************************************************** -->		
		
	<!-- Mybatis MapperScannerConfigurer自动扫描将Mapper接口（*Mapper.java）生成代理注入到Spring @reference http://www.tuicool.com/articles/BbAz6v/ -->	
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cmc.*.service.dao" />
		<!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
		<property name="markerInterface" value="com.cmc.common.BaseMapper" />
		<!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口 -->
		<!--
			<property name="properties"> 
				<value>mappers=com.ucmed.common.core.dao.BaseMapper</value> 
			</property>
			-->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	<!-- XML Mybatis配置end -->
	
</beans>